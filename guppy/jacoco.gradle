apply plugin: 'com.hiya.jacoco-android'

jacoco {
    toolVersion = "0.8.4"
}

ext {
    limits = [
            'instruction': 50,
            'branch'     : 37,
            'line'       : 45,
            'complexity' : 41,
            'method'     : 60,
            'class'      : 47
    ]
}

task jacocoTestReportCoverage(type: JacocoReport, dependsOn: ['testDebugUnitTest', 'jacocoTestReport']) {

    reports {
        //XML required by the below coverage checks
        xml.enabled = true
        html.enabled = true
    }

    def excludes = ['**/R.class',
                    '**/R$*.class',
                    '**/BuildConfig.*',
                    '**/Manifest*.*',
                    '**/*Test*.*',
                    'android/**/*.*',
                    'com/android/databinding/**',
                    'com/newrelic/agent/android/**',
                    '**/*Fragment*',
                    '**/*Activity*',
                    '**/*MembersInjector*',
                    '**/*Factory*',
                    '**/database/*',
                    '**/*Mapper*',
                    '**/api/**']

    def debugTree = fileTree(dir: "${buildDir}/tmp/kotlin-classes/debug/com/jnj/guppy", excludes: excludes) +
            fileTree(dir: "${buildDir}/intermediates/javac/debug/compileDebugJavaWithJavac/classes/com/jnj/guppy", excludes: excludes)
    def mainSrc = "${project.projectDir}/src/main/java"

    getSourceDirectories().from = files([mainSrc])
    getClassDirectories().from = files([debugTree])
    getExecutionData().from = files("${buildDir}/jacoco/testDebugUnitTest.exec")

    doLast {
        def report = file("${buildDir}/jacoco/jacoco.xml")
        logger.lifecycle("Checking coverage results: ${report}")

        def parser = new XmlParser()
        parser.setFeature("http://apache.org/xml/features/nonvalidating/load-external-dtd", false)
        parser.setFeature("http://apache.org/xml/features/disallow-doctype-decl", false)
        def results = parser.parse(report)

        def percentage = {
            def covered = it.'@covered' as Double
            def missed = it.'@missed' as Double
            ((covered / (covered + missed)) * 100).round(2)
        }

        def counters = results.counter
        def metrics = [:]
        metrics << [
                'instruction': percentage(counters.find { it.'@type'.equals('INSTRUCTION') }),
                'branch'     : percentage(counters.find { it.'@type'.equals('BRANCH') }),
                'line'       : percentage(counters.find { it.'@type'.equals('LINE') }),
                'complexity' : percentage(counters.find { it.'@type'.equals('COMPLEXITY') }),
                'method'     : percentage(counters.find { it.'@type'.equals('METHOD') }),
                'class'      : percentage(counters.find { it.'@type'.equals('CLASS') })
        ]

        def failures = []
        metrics.each {
            def limit = limits[it.key]
            if (it.value < limit) {
                failures.add("- ${it.key} coverage rate is: ${it.value}%, minimum is ${limit}%")
            }
        }

        if (failures) {
            logger.quiet("------------------ Code Coverage Failed -----------------------")
            failures.each {
                logger.quiet(it)
            }
            logger.quiet("---------------------------------------------------------------")
            throw new GradleException("Code coverage failed")
        } else {
            logger.quiet("Passed Code Coverage Checks")
        }
    }
}
check.dependsOn jacocoTestReport